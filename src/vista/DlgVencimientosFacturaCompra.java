package vista;

import controlador.Ctrl_VencimientosFacturaCompra;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import modelo.VencimientoFacturaCompra;
import servicios.ServicioFacturaCompra;

/**
 * Dialogo para gestionar los vencimientos de facturas de compra. Este cuadro de
 * diálogo permite ver y gestionar los vencimientos asociados a una factura de
 * compra específica.
 *
 * @author Alfonso Lanzarot
 */
public class DlgVencimientosFacturaCompra extends javax.swing.JDialog {

    /**
     * Variables de instancia de la clase.
     */
    private int xMouse, yMouse;
    private int idFacturaCompra;
    private List<VencimientoFacturaCompra> listaVencimientos;
    private static List<VencimientoFacturaCompra> listaVencimientosFacturaCompra;
    private DlgFacturasCompra dlgFacturasCompra;
    private VencimientoFacturaCompra vencimiento;

    /**
     * Crea un nuevo diálogo para gestionar los vencimientos de facturas de
     * compra.
     *
     * @param parent El marco padre del cuadro de diálogo.
     * @param modal Indica si el diálogo debe ser modal.
     */
    public DlgVencimientosFacturaCompra(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(new Dimension(1080, 270));
        this.setLocationRelativeTo(null);
        this.txtPendiente.setText("0,00 €");
        this.txtPagado.setText("0,00 €");
        this.vencimiento = new VencimientoFacturaCompra();
        listaVencimientosFacturaCompra = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlVencimientos = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        lblVencimiento = new javax.swing.JLabel();
        txtVencimiento = new javax.swing.JTextField();
        lblPendiente = new javax.swing.JLabel();
        txtPendiente = new javax.swing.JTextField();
        lblPago = new javax.swing.JLabel();
        txtPago = new javax.swing.JTextField();
        lblPagado = new javax.swing.JLabel();
        txtPagado = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        cbEstado = new javax.swing.JComboBox<>();
        btnInsertar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1080, 270));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlVencimientos.setBackground(new java.awt.Color(247, 247, 252));
        pnlVencimientos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(52, 98, 139)));
        pnlVencimientos.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlVencimientosMouseDragged(evt);
            }
        });
        pnlVencimientos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlVencimientosMousePressed(evt);
            }
        });
        pnlVencimientos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitulo.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(52, 98, 139));
        lblTitulo.setText("Insertar vencimientos");
        pnlVencimientos.add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        lblVencimiento.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblVencimiento.setForeground(new java.awt.Color(102, 102, 102));
        lblVencimiento.setText("Fecha de vencimiento");
        pnlVencimientos.add(lblVencimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 175, -1));

        txtVencimiento.setBackground(new java.awt.Color(255, 255, 255));
        txtVencimiento.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtVencimiento.setForeground(new java.awt.Color(0, 0, 0));
        txtVencimiento.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtVencimiento.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtVencimiento.setPreferredSize(new java.awt.Dimension(64, 27));
        pnlVencimientos.add(txtVencimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 175, -1));

        lblPendiente.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblPendiente.setForeground(new java.awt.Color(102, 102, 102));
        lblPendiente.setText("Importe pendiente");
        pnlVencimientos.add(lblPendiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 90, 175, -1));

        txtPendiente.setBackground(new java.awt.Color(255, 255, 255));
        txtPendiente.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtPendiente.setForeground(new java.awt.Color(0, 0, 0));
        txtPendiente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPendiente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtPendiente.setPreferredSize(new java.awt.Dimension(64, 27));
        txtPendiente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPendienteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPendienteFocusLost(evt);
            }
        });
        pnlVencimientos.add(txtPendiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 175, -1));

        lblPago.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblPago.setForeground(new java.awt.Color(102, 102, 102));
        lblPago.setText("Fecha de pago");
        pnlVencimientos.add(lblPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 90, 175, -1));

        txtPago.setBackground(new java.awt.Color(255, 255, 255));
        txtPago.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtPago.setForeground(new java.awt.Color(0, 0, 0));
        txtPago.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPago.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtPago.setPreferredSize(new java.awt.Dimension(64, 27));
        txtPago.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPagoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPagoFocusLost(evt);
            }
        });
        pnlVencimientos.add(txtPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 110, 175, -1));

        lblPagado.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblPagado.setForeground(new java.awt.Color(102, 102, 102));
        lblPagado.setText("Importe pagado");
        pnlVencimientos.add(lblPagado, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 90, 175, -1));

        txtPagado.setBackground(new java.awt.Color(255, 255, 255));
        txtPagado.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtPagado.setForeground(new java.awt.Color(0, 0, 0));
        txtPagado.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPagado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtPagado.setPreferredSize(new java.awt.Dimension(64, 27));
        txtPagado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPagadoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPagadoFocusLost(evt);
            }
        });
        pnlVencimientos.add(txtPagado, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 110, 175, -1));

        lblEstado.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblEstado.setForeground(new java.awt.Color(102, 102, 102));
        lblEstado.setText("Estado");
        pnlVencimientos.add(lblEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(794, 90, 175, -1));

        cbEstado.setBackground(new java.awt.Color(255, 255, 255));
        cbEstado.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        cbEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar estado:", "PENDIENTE", "PAGADO" }));
        cbEstado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        cbEstado.setPreferredSize(new java.awt.Dimension(80, 27));
        pnlVencimientos.add(cbEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(794, 110, 250, -1));

        btnInsertar.setBackground(new java.awt.Color(106, 141, 162));
        btnInsertar.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnInsertar.setForeground(new java.awt.Color(255, 255, 255));
        btnInsertar.setText("Insertar");
        btnInsertar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(52, 98, 139), 3));
        btnInsertar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnInsertar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnInsertarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnInsertarMouseExited(evt);
            }
        });
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });
        btnInsertar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnInsertarKeyPressed(evt);
            }
        });
        pnlVencimientos.add(btnInsertar, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 200, 109, 42));

        btnCancelar.setBackground(new java.awt.Color(255, 124, 128));
        btnCancelar.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Salir");
        btnCancelar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 102), 3));
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCancelarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCancelarMouseExited(evt);
            }
        });
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        pnlVencimientos.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 200, 109, 42));

        getContentPane().add(pnlVencimientos, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 270));

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Cambia el color de fondo del botón "Insertar" cuando el ratón entra en el
     * área del botón.
     *
     * @param evt El evento del ratón que dispara este método.
     */
    private void btnInsertarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertarMouseEntered
        btnInsertar.setBackground(new Color(81, 111, 129));
    }//GEN-LAST:event_btnInsertarMouseEntered
    /**
     * Restaura el color de fondo del botón "Insertar" cuando el ratón sale del
     * área del botón.
     *
     * @param evt El evento del ratón que dispara este método.
     */
    private void btnInsertarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertarMouseExited
        btnInsertar.setBackground(new Color(106, 141, 162));
    }//GEN-LAST:event_btnInsertarMouseExited
    /**
     * Ejecuta la acción de insertar vencimientos cuando se hace clic en el
     * botón "Insertar".
     *
     * @param evt El evento de acción que dispara este método.
     */
    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        insertarVencimientos();
    }//GEN-LAST:event_btnInsertarActionPerformed
    /**
     * Ejecuta la acción de insertar vencimientos cuando se presiona una tecla
     * mientras el botón "Insertar" tiene el foco.
     *
     * @param evt El evento de teclado que dispara este método.
     */
    private void btnInsertarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnInsertarKeyPressed
        insertarVencimientos();
    }//GEN-LAST:event_btnInsertarKeyPressed
    /**
     * Cambia el color de fondo del botón "Cancelar" cuando el ratón entra en el
     * área del botón.
     *
     * @param evt El evento del ratón que dispara este método.
     */
    private void btnCancelarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMouseEntered
        btnCancelar.setBackground(new Color(255, 91, 95));
    }//GEN-LAST:event_btnCancelarMouseEntered
    /**
     * Restaura el color de fondo del botón "Cancelar" cuando el ratón sale del
     * área del botón.
     *
     * @param evt El evento del ratón que dispara este método.
     */
    private void btnCancelarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMouseExited
        btnCancelar.setBackground(new Color(255, 124, 128));
    }//GEN-LAST:event_btnCancelarMouseExited
    /**
     * Cierra el diálogo cuando se hace clic en el botón "Cancelar".
     *
     * @param evt El evento de acción que dispara este método.
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed
    /**
     * Método que registra la posición del cursor del mouse en el panel de
     * encabezado.
     *
     * @param evt Evento del mouse.
     */
    private void pnlVencimientosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlVencimientosMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_pnlVencimientosMousePressed
    /**
     * Método que arrastra la ventana a la nueva posición según el movimiento
     * del mouse.
     *
     * @param evt Evento del mouse.
     */
    private void pnlVencimientosMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlVencimientosMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_pnlVencimientosMouseDragged

    private void txtPendienteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPendienteFocusGained

    }//GEN-LAST:event_txtPendienteFocusGained

    private void txtPendienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPendienteFocusLost

    }//GEN-LAST:event_txtPendienteFocusLost

    private void txtPagadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPagadoFocusGained

    }//GEN-LAST:event_txtPagadoFocusGained

    private void txtPagadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPagadoFocusLost

    }//GEN-LAST:event_txtPagadoFocusLost

    private void txtPagoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPagoFocusGained

    }//GEN-LAST:event_txtPagoFocusGained

    private void txtPagoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPagoFocusLost

    }//GEN-LAST:event_txtPagoFocusLost

    /**
     * Método que refresca la tabla de vencimientos de la factura de compra una
     * vez insertado un nuevo vencimiento.
     */
    public void refrescarTablaVencimientosFacturaCompra() {
        this.dlgFacturasCompra.setListaVencimientosFacturaCompra(listaVencimientosFacturaCompra);
        this.dlgFacturasCompra.onListaVencimientosActualizada();

    } // Cierre del método.

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgVencimientosFacturaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgVencimientosFacturaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgVencimientosFacturaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgVencimientosFacturaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgVencimientosFacturaCompra dialog = new DlgVencimientosFacturaCompra(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JComboBox<String> cbEstado;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblPagado;
    private javax.swing.JLabel lblPago;
    private javax.swing.JLabel lblPendiente;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblVencimiento;
    private javax.swing.JPanel pnlVencimientos;
    private javax.swing.JTextField txtPagado;
    private javax.swing.JTextField txtPago;
    private javax.swing.JTextField txtPendiente;
    private javax.swing.JTextField txtVencimiento;
    // End of variables declaration//GEN-END:variables

    /**
     * Inserta un nuevo vencimiento de factura de compra basado en los datos
     * ingresados por el usuario.
     *
     * Este método obtiene los valores de los campos de texto correspondientes a
     * la fecha de vencimiento, importe pendiente, fecha de pago, importe pagado
     * y estado. Luego, crea una nueva instancia de VencimientoFacturaCompra,
     * asigna los valores obtenidos y los guarda en la base de datos a través
     * del controlador Ctrl_VencimientosFacturaCompra. Si la inserción es
     * exitosa, actualiza la lista de vencimientos y refresca la tabla
     * correspondiente. Si hay algún campo que no se haya llenado, muestra un
     * mensaje de advertencia.
     */
    private void insertarVencimientos() {
        try {
            vencimiento = new VencimientoFacturaCompra();

            vencimiento.setFecha_vencimiento(txtVencimiento.getText());
            vencimiento.setImporte_pendiente(Double.valueOf(ServicioFacturaCompra.quitarSimboloEuroPorcentaje(txtPendiente.getText())));
            vencimiento.setFecha_pago(txtPago.getText());
            vencimiento.setImporte_pagado(Double.valueOf(ServicioFacturaCompra.quitarSimboloEuroPorcentaje(txtPagado.getText())));
            String estadoSeleccionado = (String) cbEstado.getSelectedItem();
            boolean estado;

            estado = !estadoSeleccionado.equals("PENDIENTE"); // Si el estado seleccionado es "PENDIENTE", establecer como falso
            // Si el estado seleccionado es diferente de "PENDIENTE", establecer como verdadero

            vencimiento.setEstado(estado);

            vencimiento.setIdFacturaCompra(DlgFacturasCompra.getIdFacturaCompra());

            if (Ctrl_VencimientosFacturaCompra.insertar(vencimiento)) {

                listaVencimientosFacturaCompra.add(vencimiento);

                this.refrescarTablaVencimientosFacturaCompra();

            }

            dlgFacturasCompra.recargarTabla();

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Debe rellenar todos los datos" + e, "ATENCIÓN", JOptionPane.WARNING_MESSAGE);
        }
        limpiarCampos();
        txtVencimiento.requestFocus();

    } // Cierre del método.

    /**
     * Interfaz que define el método para notificar cuando la lista de
     * vencimientos ha sido actualizada.
     */
    public interface ListaVencimientosListener {

        /**
         * Método invocado cuando la lista de vencimientos de la factura de
         * compra ha sido actualizada.
         *
         * Este método se llama automáticamente cuando la lista de vencimientos
         * de la factura de compra ha sido modificada de alguna manera, como
         * cuando se añade, elimina o actualiza un vencimiento. Puedes
         * implementar este método para realizar acciones adicionales después de
         * que la lista de vencimientos de la factura de compra haya sido
         * actualizada.
         */
        void onListaVencimientosActualizada();
    } // Cierre del método.

    /**
     * Este método establece el ID de la factura de compra asociada a este
     * diálogo.
     *
     * @param idFacturaCompra El ID de la factura de compra.
     */
    public void setIdFacturaCompra(int idFacturaCompra) {
        this.idFacturaCompra = idFacturaCompra;
    } // Cierre del método.

    /**
     * Este método devuelve el diálogo FacturasCompra asociado a este diálogo de
     * vencimientos.
     *
     * @return El diálogo FacturasCompra asociado.
     */
    public DlgFacturasCompra getDlgFacturasCompra() {
        return dlgFacturasCompra;
    } // Cierre del método.

    /**
     * Este método establece el diálogo FacturasCompra asociado a este diálogo
     * de vencimientos.
     *
     * @param dlgFacturasCompra El diálogo FacturasCompra asociado.
     */
    public void setDlgFacturasCompra(DlgFacturasCompra dlgFacturasCompra) {
        this.dlgFacturasCompra = dlgFacturasCompra;
    } // Cierre del método.

    /**
     * Este método limpia todos los campos del diálogo de productos. Restablece
     * los campos de texto y los valores de los componentes a su estado inicial
     * o vacío.
     */
    private void limpiarCampos() {
        txtVencimiento.setText("");
        txtPendiente.setText("0,00 €");
        txtPago.setText("");
        txtPagado.setText("0,00 €");
        cbEstado.setSelectedIndex(0);

    } // Cierre del método.

    /**
     * Este método proporciona una imagen escalada con las dimensiones
     * especificadas. Lee una imagen desde la ruta especificada y la escala
     * según el ancho y alto dados.
     *
     * @param path Ruta del icono.
     * @param width Anchura del icono.
     * @param heigth Altura del icono.
     * @return Una instancia de Icon que representa la imagen escalada.
     */
    public Icon icono(String path, int width, int heigth) {
        Icon img = new ImageIcon(new ImageIcon(getClass().getResource(path)).getImage().getScaledInstance(width, heigth, java.awt.Image.SCALE_SMOOTH));
        return img;
    } // Cierre del método.

}
