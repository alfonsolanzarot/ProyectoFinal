package vista;

import conexion.Conexion;
import controlador.Ctrl_ProductosProforma;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import modelo.Producto;
import modelo.ProductoProforma;
import servicios.ServicioProducto;
import vista.DlgProformas.ServicioListener;

/**
 *
 * @author Alfonso Lanzarot
 */
public final class DlgProductosProforma extends javax.swing.JDialog {

    private int xMouse, yMouse;
    private String tipoPrecio;
    private int idProforma;
    private List<Producto> listaProductos;
    private ServicioListener servicioListener;
    private static List<ProductoProforma> listaProductosProforma;
    private DlgProformas dlgProformas;
    private ProductoProforma producto;
    private boolean esServicio;

    /**
     * Creates new form DlgProductosProforma
     *
     * @param parent
     * @param modal
     */
    public DlgProductosProforma(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(new Dimension(1130, 270));
        this.setLocationRelativeTo(null);
        this.txtCodigo.setEditable(false);
        this.txtSubtotal.setEditable(false);
        this.txtImporteIva.setEditable(false);
        this.datosProductoCombo();
        this.CargarComboProductos();
        this.txtSubtotal.setText("0,00 €");
        this.txtImporteIva.setText("0,00 €");
        this.kilosListener();
        this.ivaListener();
        this.precioListener();
        this.producto = new ProductoProforma();
        listaProductosProforma = new ArrayList<>();

    }

    public boolean isEsServicioSeleccionado() {
        return ckbxServicio.isSelected();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlProductos = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        lblCodigo = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        lblProducto = new javax.swing.JLabel();
        cbProducto = new javax.swing.JComboBox<>();
        lblPrecio = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        lblKilos = new javax.swing.JLabel();
        txtKilos = new javax.swing.JTextField();
        lblSubtotal = new javax.swing.JLabel();
        txtSubtotal = new javax.swing.JTextField();
        lblTipoIva = new javax.swing.JLabel();
        cbTipoIva = new javax.swing.JComboBox<>();
        lblImporteIva = new javax.swing.JLabel();
        txtImporteIva = new javax.swing.JTextField();
        btnInsertar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        ckbxServicio = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1120, 270));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlProductos.setBackground(new java.awt.Color(247, 247, 252));
        pnlProductos.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(52, 98, 139), 1, true));
        pnlProductos.setPreferredSize(new java.awt.Dimension(1130, 300));
        pnlProductos.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlProductosMouseDragged(evt);
            }
        });
        pnlProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlProductosMousePressed(evt);
            }
        });
        pnlProductos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitulo.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(52, 98, 139));
        lblTitulo.setText("Insertar línea de producto o servicio");
        pnlProductos.add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        lblCodigo.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblCodigo.setForeground(new java.awt.Color(102, 102, 102));
        lblCodigo.setText("Código del producto o servicio");
        pnlProductos.add(lblCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 175, -1));

        txtCodigo.setBackground(new java.awt.Color(255, 255, 255));
        txtCodigo.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtCodigo.setForeground(new java.awt.Color(0, 0, 0));
        txtCodigo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodigo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtCodigo.setPreferredSize(new java.awt.Dimension(64, 27));
        pnlProductos.add(txtCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 175, -1));

        lblProducto.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblProducto.setForeground(new java.awt.Color(102, 102, 102));
        lblProducto.setText("Producto o servicio");
        pnlProductos.add(lblProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 90, 175, -1));

        cbProducto.setBackground(new java.awt.Color(255, 255, 255));
        cbProducto.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        cbProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar producto:", "Item 2", "Item 3", "Item 4" }));
        cbProducto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        cbProducto.setPreferredSize(new java.awt.Dimension(400, 27));
        pnlProductos.add(cbProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 300, -1));

        lblPrecio.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblPrecio.setForeground(new java.awt.Color(102, 102, 102));
        lblPrecio.setText("Precio unitario");
        pnlProductos.add(lblPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(535, 90, 85, -1));

        txtPrecio.setBackground(new java.awt.Color(255, 255, 255));
        txtPrecio.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtPrecio.setForeground(new java.awt.Color(0, 0, 0));
        txtPrecio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPrecio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtPrecio.setPreferredSize(new java.awt.Dimension(64, 27));
        txtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPrecioKeyPressed(evt);
            }
        });
        pnlProductos.add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(535, 110, 85, -1));

        lblKilos.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblKilos.setForeground(new java.awt.Color(102, 102, 102));
        lblKilos.setText("Kilos/Uds.");
        pnlProductos.add(lblKilos, new org.netbeans.lib.awtextra.AbsoluteConstraints(637, 90, 60, -1));

        txtKilos.setBackground(new java.awt.Color(255, 255, 255));
        txtKilos.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtKilos.setForeground(new java.awt.Color(0, 0, 0));
        txtKilos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtKilos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtKilos.setPreferredSize(new java.awt.Dimension(64, 27));
        txtKilos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtKilosKeyPressed(evt);
            }
        });
        pnlProductos.add(txtKilos, new org.netbeans.lib.awtextra.AbsoluteConstraints(637, 110, 110, -1));

        lblSubtotal.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblSubtotal.setForeground(new java.awt.Color(102, 102, 102));
        lblSubtotal.setText("Subtotal");
        pnlProductos.add(lblSubtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(765, 90, 60, -1));

        txtSubtotal.setBackground(new java.awt.Color(255, 255, 255));
        txtSubtotal.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        txtSubtotal.setForeground(new java.awt.Color(0, 0, 0));
        txtSubtotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSubtotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtSubtotal.setPreferredSize(new java.awt.Dimension(64, 27));
        pnlProductos.add(txtSubtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(765, 110, 110, -1));

        lblTipoIva.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblTipoIva.setForeground(new java.awt.Color(102, 102, 102));
        lblTipoIva.setText("Tipo IVA");
        pnlProductos.add(lblTipoIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(893, 90, 60, -1));

        cbTipoIva.setBackground(new java.awt.Color(255, 255, 255));
        cbTipoIva.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        cbTipoIva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0,00%", "10,00%", "21,00%" }));
        cbTipoIva.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        cbTipoIva.setPreferredSize(new java.awt.Dimension(400, 27));
        cbTipoIva.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cbTipoIvaKeyPressed(evt);
            }
        });
        pnlProductos.add(cbTipoIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(893, 110, 80, -1));

        lblImporteIva.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblImporteIva.setForeground(new java.awt.Color(102, 102, 102));
        lblImporteIva.setText("Importe IVA");
        pnlProductos.add(lblImporteIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(992, 90, 75, -1));

        txtImporteIva.setBackground(new java.awt.Color(255, 255, 255));
        txtImporteIva.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        txtImporteIva.setForeground(new java.awt.Color(0, 0, 0));
        txtImporteIva.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtImporteIva.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtImporteIva.setPreferredSize(new java.awt.Dimension(64, 27));
        pnlProductos.add(txtImporteIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(992, 110, 110, -1));

        btnInsertar.setBackground(new java.awt.Color(106, 141, 162));
        btnInsertar.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnInsertar.setForeground(new java.awt.Color(255, 255, 255));
        btnInsertar.setText("Insertar");
        btnInsertar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(52, 98, 139), 3));
        btnInsertar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnInsertar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnInsertarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnInsertarMouseExited(evt);
            }
        });
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });
        pnlProductos.add(btnInsertar, new org.netbeans.lib.awtextra.AbsoluteConstraints(855, 200, 109, 42));

        btnCancelar.setBackground(new java.awt.Color(255, 124, 128));
        btnCancelar.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Salir");
        btnCancelar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 102), 3));
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCancelarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCancelarMouseExited(evt);
            }
        });
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        pnlProductos.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(992, 200, 109, 42));

        ckbxServicio.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        ckbxServicio.setText("Marcar si es un servicio");
        ckbxServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbxServicioActionPerformed(evt);
            }
        });
        pnlProductos.add(ckbxServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, -1, -1));

        getContentPane().add(pnlProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1130, 270));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertarMouseEntered
        btnInsertar.setBackground(new Color(81, 111, 129));
    }//GEN-LAST:event_btnInsertarMouseEntered

    private void btnInsertarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertarMouseExited
        btnInsertar.setBackground(new Color(106, 141, 162));
    }//GEN-LAST:event_btnInsertarMouseExited

    private void btnCancelarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMouseEntered
        btnCancelar.setBackground(new Color(255, 91, 95));
    }//GEN-LAST:event_btnCancelarMouseEntered

    private void btnCancelarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMouseExited
        btnCancelar.setBackground(new Color(255, 124, 128));
    }//GEN-LAST:event_btnCancelarMouseExited

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed
    /**
     * *****************************
     * MÉTODO PARA MOVER LA VENTANA.
     *
     * *****************************
     * @param evt
     */
    private void pnlProductosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlProductosMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_pnlProductosMousePressed

    private void pnlProductosMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlProductosMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_pnlProductosMouseDragged

    private void txtKilosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKilosKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cbTipoIva.requestFocus();
        }
    }//GEN-LAST:event_txtKilosKeyPressed

    private void txtPrecioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtKilos.requestFocus();
        }
    }//GEN-LAST:event_txtPrecioKeyPressed

    private void cbTipoIvaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbTipoIvaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnInsertar.requestFocus();
        }
    }//GEN-LAST:event_cbTipoIvaKeyPressed

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed

        try {
            producto = new ProductoProforma();

            producto.setCantidad(Double.valueOf(ServicioProducto.quitarSimboloEuroKiloPorcentaje(txtKilos.getText())));
            producto.setCodigo_producto(txtCodigo.getText());
            producto.setDescripcion((String) cbProducto.getSelectedItem());
            producto.setPrecio_unitario(Double.valueOf(ServicioProducto.quitarSimboloEuroKiloPorcentaje(txtPrecio.getText())));
            producto.setSubtotal(Double.valueOf(ServicioProducto.quitarSimboloEuroKiloPorcentaje(txtSubtotal.getText())));
            producto.setTipo_iva(Double.valueOf(ServicioProducto.quitarSimboloEuroKiloPorcentaje((String) cbTipoIva.getSelectedItem())));
            producto.setImporte_iva(Double.valueOf(ServicioProducto.quitarSimboloEuroKiloPorcentaje(txtImporteIva.getText())));
            producto.setIdProducto(this.listaProductos.get(cbProducto.getSelectedIndex() - 1).getIdProducto());
            producto.setIdProforma(DlgProformas.getIdProforma());

            if (Ctrl_ProductosProforma.insertar(producto)) {

                listaProductosProforma.add(producto);

                this.refrescarTablaProductosProforma();

            }
            dlgProformas.recargarTabla();
            dlgProformas.calcularTotales();

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Debe rellenar todos los datos" + e, "ATENCIÓN", JOptionPane.WARNING_MESSAGE);
        }
        limpiarCampos();

    }//GEN-LAST:event_btnInsertarActionPerformed

    private void ckbxServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbxServicioActionPerformed
        // Actualiza el estado del servicio en el producto actual
        producto.setEsServicio(ckbxServicio.isSelected());

        // Notifica a través del servicioListener que el estado del servicio ha cambiado
        if (dlgProformas != null) {
            dlgProformas.estadoServicioActualizado(ckbxServicio.isSelected());
        }
    }//GEN-LAST:event_ckbxServicioActionPerformed

    public void refrescarTablaProductosProforma() {
        this.dlgProformas.setListaProductosProforma(listaProductosProforma);
        this.dlgProformas.onListaProductosActualizada();

    }

    public void setServicioListener(ServicioListener listener) {
        this.servicioListener = listener;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgProductosProforma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgProductosProforma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgProductosProforma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgProductosProforma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgProductosProforma dialog = new DlgProductosProforma(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JComboBox<String> cbProducto;
    private javax.swing.JComboBox<String> cbTipoIva;
    private javax.swing.JCheckBox ckbxServicio;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JLabel lblImporteIva;
    private javax.swing.JLabel lblKilos;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblProducto;
    private javax.swing.JLabel lblSubtotal;
    private javax.swing.JLabel lblTipoIva;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlProductos;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtImporteIva;
    private javax.swing.JTextField txtKilos;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtSubtotal;
    // End of variables declaration//GEN-END:variables

    public interface ListaProductosListener {

        void onListaProductosActualizada();
    }

    /**
     * *****************************************************************************
     * MÉTODO PARA CARGAR LOS PRODUCTOS EN EL COMBO BOX DE PRODUCTOS DE LA
     * PROFORMA.
     *
     * *****************************************************************************
     */
    private void CargarComboProductos() {
        this.listaProductos = new ArrayList<>();
        Connection cn = Conexion.conectar();
        String sql = "SELECT idProducto, codigo_producto, descripcion, formato, peso_unitario, precio_alto, precio_bajo, precio_servicio FROM tb_productos";
        Statement st;

        try {
            st = (Statement) cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            cbProducto.removeAllItems();
            cbProducto.addItem("Seleccionar producto: ");
            while (rs.next()) {
                Producto producto = new Producto();

                producto.setIdProducto(rs.getInt("idProducto"));
                if (null != rs.getString("codigo_producto")) {
                    producto.setCodigo(rs.getString("codigo_producto"));
                }
                producto.setDescripcion(rs.getString("descripcion"));
                if (null != rs.getString("formato")) {
                    producto.setFormato(rs.getString("formato"));
                }
                producto.setPesoUnitario(rs.getDouble("peso_unitario"));
                producto.setPrecioAlto(rs.getDouble("precio_alto"));
                producto.setPrecioBajo(rs.getDouble("precio_bajo"));
                producto.setPrecioServicio(rs.getDouble("precio_Servicio"));

                this.listaProductos.add(producto);

                cbProducto.addItem(rs.getString("descripcion"));
            }

        } catch (SQLException ex) {
            System.out.println("Error al cargar los productos." + ex);
        } finally {

            if (cn != null) {

                try {

                    cn.close();

                } catch (SQLException ex) {

                    System.out.println("Error al cerrar la conexión: " + ex);

                }
            }
        }
    }

    /**
     * ***********************************************************************
     * MÉTODO PARA CARGAR LOS DATOS DEL PRODUCTO SELECCIONADO EN EL COMBO BOX.
     *
     * ***********************************************************************
     */
    private void datosProductoCombo() {
        // Agrega un ActionListener al JComboBox cbCliente
        cbProducto.addActionListener((ActionEvent e) -> {
            // Verifica si se ha seleccionado un producto válido
            if (cbProducto.getSelectedIndex() > 0) {
                // Obtén el nombre del producto seleccionado del JComboBox
                String nombreProducto = (String) cbProducto.getSelectedItem();

                // Realiza una consulta a la base de datos para obtener la información del producto
                Connection cn = Conexion.conectar();
                String sql = "SELECT codigo_producto, descripcion, precio_alto, precio_bajo, precio_servicio "
                        + "FROM tb_productos WHERE descripcion = '" + nombreProducto + "'";
                Statement st = null;
                ResultSet rs = null;

                try {
                    st = cn.createStatement();

                    rs = st.executeQuery(sql);

                    // Si se encuentra el producto, actualiza los campos de texto en el JDialog
                    if (rs.next()) {
                        txtCodigo.setText(rs.getString("codigo_producto"));

                        // Obtener el precio según el tipo de cliente
                        double precio;
                        if (rs.getDouble("precio_servicio") != 0d) {

                            precio = rs.getDouble("precio_servicio");

                        } else if (tipoPrecio.equals("Alto")) {

                            precio = rs.getDouble("precio_alto");

                        } else {

                            precio = rs.getDouble("precio_bajo");

                        }

                        // Formatear el precio con el formato deseado
                        DecimalFormat df = (DecimalFormat) NumberFormat.getInstance();
                        df.applyPattern("#,##0.00 €");
                        String precioFormateado = df.format(precio);

                        txtPrecio.setText(precioFormateado);

                        // Establecer el foco en el campo txtKilos
                        txtKilos.requestFocus();

                    }
                } catch (SQLException ex) {
                    System.out.println("Error al obtener la información del producto: " + ex);
                } finally {
                    try {
                        if (rs != null) {
                            rs.close();
                        }
                        if (st != null) {
                            st.close();
                        }
                        if (cn != null) {
                            cn.close();
                        }
                    } catch (SQLException ex) {
                        System.out.println("Error al cerrar la conexión: " + ex);
                    }
                }
            }
        });
    }

    /**
     * *************************************
     * MÉTODO SETTER PARA EL TIPO DE PRECIO.
     *
     * *************************************
     * @param tipoPrecio
     */
    public void setTipoPrecio(String tipoPrecio) {

        this.tipoPrecio = tipoPrecio;
    }

    public void setIdProforma(int idProforma) {
        this.idProforma = idProforma;
    }

    /**
     * **************************************************************************
     * MÉTODO LISTENER PARA ACTUALIZAR EL SUBTOTAL Y EL IVA AL CAMBIAR LOS
     * KILOS.
     *
     * **************************************************************************
     */
    public void kilosListener() {
        txtKilos.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                actualizarSubtotalYIva();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                actualizarSubtotalYIva();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                actualizarSubtotalYIva();
            }
        });
    }

    /**
     * ********************************************
     * MÉTODO PARA ACTUALIZAR EL SUBTOTAL Y EL IVA.
     *
     * ********************************************
     */
    private void actualizarSubtotalYIva() {
        String precioStr = txtPrecio.getText().trim(); // Eliminar espacios en blanco al inicio y al final

        // Verificar que el precio no esté vacío
        if (!precioStr.isEmpty()) {
            try {
                // Eliminar el símbolo de euro y los puntos del precio
                precioStr = precioStr.replaceAll("[€\\s.]", "");

                // Reemplazar la coma por un punto para el formato correcto del número
                precioStr = precioStr.replace(",", ".");
                double precio = Double.parseDouble(precioStr);

                String kilosStr = txtKilos.getText().trim(); // Eliminar espacios en blanco al inicio y al final

                // Verificar que el campo de kilos tampoco esté vacío
                if (!kilosStr.isEmpty()) {
                    double kilos = Double.parseDouble(kilosStr);

                    // Calcular el subtotal multiplicando el precio por los kilos
                    double subtotal = precio * kilos;

                    // Formatear el subtotal con el formato deseado
                    DecimalFormat df = (DecimalFormat) NumberFormat.getInstance();
                    df.applyPattern("#,##0.00 €");
                    String subtotalFormateado = df.format(subtotal);

                    // Actualizar el campo de texto txtSubtotal con el valor calculado
                    txtSubtotal.setText(subtotalFormateado);

                    // Calcular el importe del IVA
                    calcularImporteIVA();
                }
            } catch (NumberFormatException ex) {
                // Si se produce un error al convertir los valores a números, mostrar un mensaje de error
                JOptionPane.showMessageDialog(null, "Error al calcular el subtotal: " + ex.getMessage(),
                        "ERROR", JOptionPane.ERROR_MESSAGE, icono("/img/cancelar.png", 40, 40));
            }
        }
    }

    /**
     * **********************************************
     * MÉTODO LISTENER PARA CALCULAR EL TOTAL DE IVA.
     *
     * **********************************************
     */
    public void ivaListener() {
        cbTipoIva.addActionListener((ActionEvent e) -> {
            calcularImporteIVA();
        });

    }

    /**
     * **************************************************************************
     * MÉTODO LISTENER PARA ACTUALIZAR EL SUBTOTAL Y EL IVA AL CAMBIAR EL
     * PRECIO.
     *
     * **************************************************************************
     */
    public void precioListener() {
        txtPrecio.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                actualizarSubtotalYIva();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                actualizarSubtotalYIva();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                actualizarSubtotalYIva();
            }
        });
    }

    /**
     * ****************************************
     * MÉTODO PARA CALCULAR EL IMPORTE DEL IVA.
     *
     * ****************************************
     */
    private void calcularImporteIVA() {
        String tipoIvaStr = (String) cbTipoIva.getSelectedItem();
        String subtotalStr = txtSubtotal.getText();
        if (!tipoIvaStr.isEmpty() && !subtotalStr.isEmpty()) {
            // Eliminar el símbolo de porcentaje si está presente
            tipoIvaStr = tipoIvaStr.replace("%", "");

            // Convertir a número
            double tipoIva = Double.parseDouble(tipoIvaStr.replace(",", ".")) / 100.0;

            // Analizar el subtotal
            NumberFormat format = NumberFormat.getInstance(Locale.getDefault());
            try {
                Number subtotalNumber = format.parse(subtotalStr);
                double subtotal = subtotalNumber.doubleValue();

                // Calcular el importe del IVA
                double importeIva = subtotal * tipoIva;

                // Formatear el importe del IVA con el formato deseado
                DecimalFormat df = (DecimalFormat) NumberFormat.getInstance();
                df.applyPattern("#,##0.00 €");
                String importeIvaFormatted = df.format(importeIva);

                // Actualizar el campo de texto txtImporteIva con el valor calculado y formateado
                txtImporteIva.setText(importeIvaFormatted);
            } catch (ParseException ex) {
                // Manejar la excepción si ocurre un error al analizar el subtotal
                System.out.println("Error al obtener el importe de IVA: " + ex);
            }
        }
    }

    /**
     * ******************************************************************
     * MÉTODO PARA OBTENER EL ID DEL PRODUCTO A PARTIR DE SU DESCRIPCIÓN.
     *
     * ******************************************************************
     */
    public class ControlProducto {

        public static int obtenerIdProducto(String descripcion) {
            int idProducto = -1; // Valor por defecto si no se encuentra el producto
            Connection cn = Conexion.conectar(); // Obtener conexión a la base de datos

            if (cn != null) {
                Statement stm = null;
                ResultSet rs = null;

                try {
                    // Crear una declaración SQL
                    stm = cn.createStatement();

                    // Consulta SQL para obtener el ID del producto a partir de su descripción
                    String consulta = "SELECT idProducto FROM tb_productos WHERE descripcion = '" + descripcion + "'";

                    // Ejecutar la consulta y obtener el resultado
                    rs = stm.executeQuery(consulta);

                    // Verificar si se encontró el producto y obtener su ID
                    if (rs.next()) {
                        idProducto = rs.getInt("idProducto");
                    }

                } catch (SQLException e) {
                    e.printStackTrace();
                } finally {
                    // Cerrar ResultSet, Statement y conexión
                    if (rs != null) {
                        try {
                            rs.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                    if (stm != null) {
                        try {
                            stm.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                    if (cn != null) {
                        try {
                            cn.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }

            return idProducto;
        }
    }

    public DlgProformas getDlgProformas() {
        return dlgProformas;
    }

    public void setDlgProformas(DlgProformas dlgProformas) {
        this.dlgProformas = dlgProformas;
    }

    /**
     * *******************************
     * MÉTODO PARA LIMPIAR LOS CAMPOS.
     *
     * *******************************
     */
    private void limpiarCampos() {
        txtCodigo.setText("");
        cbProducto.setSelectedIndex(0);
        txtPrecio.setText("");
        txtKilos.setText("");
        txtSubtotal.setText("");
        cbTipoIva.setSelectedIndex(0);
        txtImporteIva.setText("");
        ckbxServicio.setSelected(false);
    }

    /**
     * *********************************************
     * MÉTODO DE ICONOS DE ATENCIÓN Y/O ADVERTENCIA.
     *
     * *********************************************
     *
     * @param path
     * @param width
     * @param heigth
     * @return
     */
    public Icon icono(String path, int width, int heigth) {
        Icon img = new ImageIcon(new ImageIcon(getClass().getResource(path)).getImage().getScaledInstance(width, heigth, java.awt.Image.SCALE_SMOOTH));
        return img;
    }

}
