package vista;

import controlador.Ctrl_Producto;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import modelo.Producto;

/**
 * Esta clase proporciona una interfaz para crear y editar productos o
 * servicios. Permite al usuario interactuar con los campos necesarios para
 * definir las características de un producto o servicio. Además, gestiona la
 * visualización de los diferentes elementos de la interfaz según la selección
 * del tipo de elemento a crear o editar.
 *
 * @author Alfonso Lanzarot
 */
public class DlgProductos extends javax.swing.JDialog {

    /**
     * Variables de instancia de la clase.
     */
    private int xMouse, yMouse; // Variables para el seguimiento del movimiento del ratón
    private int idProducto; // Identificador del producto actual
    private InterProductos ifProducto; // Interfaz para interactuar con la lista de productos

    /**
     * Constructor que crea un nuevo formulario DlgProductos.
     *
     * @param parent El Frame padre de la ventana de diálogo.
     * @param modal Indica si la ventana es modal o no.
     */
    public DlgProductos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(new Dimension(608, 400));
        this.setLocationRelativeTo(null);

        // Marcar por defecto rbtnProducto al iniciar el diálogo
        rbtnProducto.setSelected(true);

        // Mostrar el panel de producto al iniciar el diálogo
        pnlProducto.setVisible(true);
        pnlServicio.setVisible(false);

    } // Cierre del constructor.

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlContenedor = new javax.swing.JPanel();
        pnlCabecera = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        rbtnProducto = new javax.swing.JRadioButton();
        rbtnServicio = new javax.swing.JRadioButton();
        pnlServicio = new javax.swing.JPanel();
        lblCodigoServicio = new javax.swing.JLabel();
        txtCodigoServicio = new javax.swing.JTextField();
        lblDescripcionServicio = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaDescripcionServicio = new javax.swing.JTextArea();
        lblPrecioServicio = new javax.swing.JLabel();
        txtPrecioServicio = new javax.swing.JTextField();
        pnlProducto = new javax.swing.JPanel();
        lblDescripcionProducto = new javax.swing.JLabel();
        txtDescripcionProducto = new javax.swing.JTextField();
        lblPrecioBajo = new javax.swing.JLabel();
        txtPrecioBajo = new javax.swing.JTextField();
        lblCodigoProducto = new javax.swing.JLabel();
        cbPeso = new javax.swing.JComboBox<>();
        lblFormato = new javax.swing.JLabel();
        cbFormato = new javax.swing.JComboBox<>();
        lblPeso = new javax.swing.JLabel();
        txtCodigoProducto = new javax.swing.JTextField();
        lblPrecioAlto = new javax.swing.JLabel();
        txtPrecioAlto = new javax.swing.JTextField();
        pnlBotones = new javax.swing.JPanel();
        btnCrear = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(620, 480));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlContenedor.setBackground(new java.awt.Color(247, 247, 252));
        pnlContenedor.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(52, 98, 139), 1, true));
        pnlContenedor.setPreferredSize(new java.awt.Dimension(608, 400));
        pnlContenedor.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlCabecera.setBackground(new java.awt.Color(247, 247, 252));
        pnlCabecera.setPreferredSize(new java.awt.Dimension(570, 102));
        pnlCabecera.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlCabeceraMouseDragged(evt);
            }
        });
        pnlCabecera.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlCabeceraMousePressed(evt);
            }
        });
        pnlCabecera.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitulo.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(52, 98, 139));
        lblTitulo.setText("Nuevo producto");
        pnlCabecera.add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        buttonGroup1.add(rbtnProducto);
        rbtnProducto.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        rbtnProducto.setForeground(new java.awt.Color(102, 102, 102));
        rbtnProducto.setText("Producto");
        rbtnProducto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rbtnProducto.setPreferredSize(null);
        rbtnProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnProductoActionPerformed(evt);
            }
        });
        pnlCabecera.add(rbtnProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 35, -1, -1));

        buttonGroup1.add(rbtnServicio);
        rbtnServicio.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        rbtnServicio.setForeground(new java.awt.Color(102, 102, 102));
        rbtnServicio.setText("Servicio");
        rbtnServicio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rbtnServicio.setPreferredSize(null);
        rbtnServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnServicioActionPerformed(evt);
            }
        });
        pnlCabecera.add(rbtnServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 35, -1, -1));

        pnlContenedor.add(pnlCabecera, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 1, 604, -1));

        pnlServicio.setBackground(new java.awt.Color(247, 247, 252));
        pnlServicio.setPreferredSize(new java.awt.Dimension(604, 300));
        pnlServicio.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblCodigoServicio.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblCodigoServicio.setForeground(new java.awt.Color(102, 102, 102));
        lblCodigoServicio.setText("Código del servicio");
        pnlServicio.add(lblCodigoServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        txtCodigoServicio.setBackground(new java.awt.Color(255, 255, 255));
        txtCodigoServicio.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtCodigoServicio.setForeground(new java.awt.Color(0, 0, 0));
        txtCodigoServicio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodigoServicio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtCodigoServicio.setPreferredSize(new java.awt.Dimension(64, 27));
        pnlServicio.add(txtCodigoServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 43, 140, -1));

        lblDescripcionServicio.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblDescripcionServicio.setForeground(new java.awt.Color(102, 102, 102));
        lblDescripcionServicio.setText("Descripción del servicio");
        pnlServicio.add(lblDescripcionServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, -1, -1));

        txaDescripcionServicio.setBackground(new java.awt.Color(255, 255, 255));
        txaDescripcionServicio.setColumns(20);
        txaDescripcionServicio.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txaDescripcionServicio.setLineWrap(true);
        txaDescripcionServicio.setRows(5);
        txaDescripcionServicio.setWrapStyleWord(true);
        txaDescripcionServicio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        jScrollPane1.setViewportView(txaDescripcionServicio);

        pnlServicio.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 43, 396, 60));

        lblPrecioServicio.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblPrecioServicio.setForeground(new java.awt.Color(102, 102, 102));
        lblPrecioServicio.setText("Precio servicio");
        pnlServicio.add(lblPrecioServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 110, 100, -1));

        txtPrecioServicio.setBackground(new java.awt.Color(255, 255, 255));
        txtPrecioServicio.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtPrecioServicio.setForeground(new java.awt.Color(0, 0, 0));
        txtPrecioServicio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPrecioServicio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtPrecioServicio.setPreferredSize(new java.awt.Dimension(64, 27));
        pnlServicio.add(txtPrecioServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 133, 115, -1));

        pnlContenedor.add(pnlServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 100, 604, 190));

        pnlProducto.setBackground(new java.awt.Color(247, 247, 252));
        pnlProducto.setPreferredSize(new java.awt.Dimension(604, 372));
        pnlProducto.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblDescripcionProducto.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblDescripcionProducto.setForeground(new java.awt.Color(102, 102, 102));
        lblDescripcionProducto.setText("Descripción del producto");
        pnlProducto.add(lblDescripcionProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, -1, -1));

        txtDescripcionProducto.setBackground(new java.awt.Color(255, 255, 255));
        txtDescripcionProducto.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtDescripcionProducto.setForeground(new java.awt.Color(0, 0, 0));
        txtDescripcionProducto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtDescripcionProducto.setPreferredSize(new java.awt.Dimension(64, 27));
        pnlProducto.add(txtDescripcionProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 43, 396, -1));
        txtDescripcionProducto.getAccessibleContext().setAccessibleName("");

        lblPrecioBajo.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblPrecioBajo.setForeground(new java.awt.Color(102, 102, 102));
        lblPrecioBajo.setText("Precio bajo");
        pnlProducto.add(lblPrecioBajo, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 90, 80, -1));

        txtPrecioBajo.setBackground(new java.awt.Color(255, 255, 255));
        txtPrecioBajo.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtPrecioBajo.setForeground(new java.awt.Color(0, 0, 0));
        txtPrecioBajo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPrecioBajo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtPrecioBajo.setPreferredSize(new java.awt.Dimension(64, 27));
        pnlProducto.add(txtPrecioBajo, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 113, 116, -1));

        lblCodigoProducto.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblCodigoProducto.setForeground(new java.awt.Color(102, 102, 102));
        lblCodigoProducto.setText("Código del producto");
        pnlProducto.add(lblCodigoProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        cbPeso.setBackground(new java.awt.Color(255, 255, 255));
        cbPeso.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        cbPeso.setForeground(new java.awt.Color(0, 0, 0));
        cbPeso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "25 kg", "20 kg", "10 kg", "5 kg", "0.75 kg" }));
        cbPeso.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        cbPeso.setPreferredSize(new java.awt.Dimension(72, 27));
        pnlProducto.add(cbPeso, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 113, 140, -1));

        lblFormato.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblFormato.setForeground(new java.awt.Color(102, 102, 102));
        lblFormato.setText("Formato");
        pnlProducto.add(lblFormato, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 60, -1));

        cbFormato.setBackground(new java.awt.Color(255, 255, 255));
        cbFormato.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        cbFormato.setForeground(new java.awt.Color(0, 0, 0));
        cbFormato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Sacos/Bags", "Cubos/Tubs", "Botes/Bottles" }));
        cbFormato.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        cbFormato.setPreferredSize(new java.awt.Dimension(72, 27));
        pnlProducto.add(cbFormato, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 113, 140, -1));

        lblPeso.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblPeso.setForeground(new java.awt.Color(102, 102, 102));
        lblPeso.setText("Peso unitario");
        pnlProducto.add(lblPeso, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 80, -1));

        txtCodigoProducto.setBackground(new java.awt.Color(255, 255, 255));
        txtCodigoProducto.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtCodigoProducto.setForeground(new java.awt.Color(0, 0, 0));
        txtCodigoProducto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodigoProducto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtCodigoProducto.setPreferredSize(new java.awt.Dimension(64, 27));
        pnlProducto.add(txtCodigoProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 43, 140, -1));

        lblPrecioAlto.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        lblPrecioAlto.setForeground(new java.awt.Color(102, 102, 102));
        lblPrecioAlto.setText("Precio alto");
        pnlProducto.add(lblPrecioAlto, new org.netbeans.lib.awtextra.AbsoluteConstraints(332, 90, 80, -1));

        txtPrecioAlto.setBackground(new java.awt.Color(255, 255, 255));
        txtPrecioAlto.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtPrecioAlto.setForeground(new java.awt.Color(0, 0, 0));
        txtPrecioAlto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPrecioAlto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(208, 206, 206)));
        txtPrecioAlto.setPreferredSize(new java.awt.Dimension(64, 27));
        pnlProducto.add(txtPrecioAlto, new org.netbeans.lib.awtextra.AbsoluteConstraints(332, 113, 115, -1));

        pnlContenedor.add(pnlProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 100, 604, 190));

        pnlBotones.setBackground(new java.awt.Color(247, 247, 252));

        btnCrear.setBackground(new java.awt.Color(106, 141, 162));
        btnCrear.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnCrear.setForeground(new java.awt.Color(255, 255, 255));
        btnCrear.setText("Crear");
        btnCrear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(52, 98, 139), 3));
        btnCrear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCrear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCrearMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCrearMouseExited(evt);
            }
        });
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });
        btnCrear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCrearKeyPressed(evt);
            }
        });

        btnCancelar.setBackground(new java.awt.Color(255, 124, 128));
        btnCancelar.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 102), 3));
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCancelarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCancelarMouseExited(evt);
            }
        });
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                .addContainerGap(343, Short.MAX_VALUE)
                .addComponent(btnCrear, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrear, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        pnlContenedor.add(pnlBotones, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 290, 604, 106));

        getContentPane().add(pnlContenedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 608, 400));

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Este método establece el color de fondo del botón al entrar el cursor del
     * ratón.
     *
     * @param evt Evento de entrada del cursor del ratón.
     */
    private void btnCrearMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearMouseEntered
        btnCrear.setBackground(new Color(81, 111, 129));
    }//GEN-LAST:event_btnCrearMouseEntered
    /**
     * Este método restablece el color de fondo del botón al salir el cursor del
     * ratón.
     *
     * @param evt Evento de salida del cursor del ratón.
     */
    private void btnCrearMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearMouseExited
        btnCrear.setBackground(new Color(106, 141, 162));
    }//GEN-LAST:event_btnCrearMouseExited
    /**
     * Este método maneja la acción del botón "Crear" o "Actualizar" dependiendo
     * del texto del botón.
     *
     * @param evt Evento de acción del botón.
     */
    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed

        String textoBoton = btnCrear.getText();

        if (textoBoton.equals("Crear")) {
            crearProducto();
        } else if (textoBoton.equals("Actualizar")) {
            actualizarProducto();
        }

    }//GEN-LAST:event_btnCrearActionPerformed
    /**
     * Este método establece el color de fondo del botón "Cancelar" al entrar el
     * cursor del ratón.
     *
     * @param evt Evento de entrada del cursor del ratón.
     */
    private void btnCancelarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMouseEntered
        btnCancelar.setBackground(new Color(255, 91, 95));
    }//GEN-LAST:event_btnCancelarMouseEntered
    /**
     * Este método restablece el color de fondo del botón "Cancelar" al salir el
     * cursor del ratón.
     *
     * @param evt Evento de salida del cursor del ratón.
     */
    private void btnCancelarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMouseExited
        btnCancelar.setBackground(new Color(255, 124, 128));
    }//GEN-LAST:event_btnCancelarMouseExited
    /**
     * Este método maneja la acción del botón "Cancelar", cerrando la ventana
     * actual.
     *
     * @param evt Evento de acción del botón.
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * Método que registra la posición del cursor del mouse en el panel de
     * encabezado.
     *
     * @param evt Evento del mouse.
     */
    private void pnlCabeceraMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlCabeceraMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_pnlCabeceraMousePressed
    /**
     * Método que arrastra la ventana a la nueva posición según el movimiento
     * del mouse.
     *
     * @param evt Evento del mouse.
     */
    private void pnlCabeceraMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlCabeceraMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_pnlCabeceraMouseDragged
    /**
     * Este método maneja la acción del radio button "Producto" al ser
     * seleccionado, mostrando los campos correspondientes para crear o editar
     * un producto.
     *
     * @param evt Evento de selección del radio button "Producto".
     */
    private void rbtnProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnProductoActionPerformed
        if (rbtnProducto.isSelected()) {
            lblTitulo.setText("Nuevo producto");
            pnlProducto.setVisible(true);
            pnlServicio.setVisible(false);
        }
    }//GEN-LAST:event_rbtnProductoActionPerformed
    /**
     * Este método maneja la acción del radio button "Servicio" al ser
     * seleccionado, mostrando los campos correspondientes para crear o editar
     * un servicio.
     *
     * @param evt Evento de selección del radio button "Servicio".
     */
    private void rbtnServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnServicioActionPerformed
        if (rbtnServicio.isSelected()) {
            lblTitulo.setText("Nuevo servicio");
            pnlProducto.setVisible(false);
            pnlServicio.setVisible(true);
        }
    }//GEN-LAST:event_rbtnServicioActionPerformed
    /**
     * Este método maneja la acción del botón "Crear" o "Actualizar" al
     * presionar la tecla Enter, dependiendo del texto del botón.
     *
     * @param evt Evento de presionar la tecla Enter sobre el botón.
     */
    private void btnCrearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCrearKeyPressed
        String textoBoton = btnCrear.getText();

        if (textoBoton.equals("Crear")) {
            crearProducto();
        } else if (textoBoton.equals("Actualizar")) {
            actualizarProducto();
        }
    }//GEN-LAST:event_btnCrearKeyPressed

    /**
     * El método principal que se ejecuta al iniciar la aplicación.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgProductos dialog = new DlgProductos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCrear;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbFormato;
    private javax.swing.JComboBox<String> cbPeso;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCodigoProducto;
    private javax.swing.JLabel lblCodigoServicio;
    private javax.swing.JLabel lblDescripcionProducto;
    private javax.swing.JLabel lblDescripcionServicio;
    private javax.swing.JLabel lblFormato;
    private javax.swing.JLabel lblPeso;
    private javax.swing.JLabel lblPrecioAlto;
    private javax.swing.JLabel lblPrecioBajo;
    private javax.swing.JLabel lblPrecioServicio;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlCabecera;
    private javax.swing.JPanel pnlContenedor;
    private javax.swing.JPanel pnlProducto;
    private javax.swing.JPanel pnlServicio;
    private javax.swing.JRadioButton rbtnProducto;
    private javax.swing.JRadioButton rbtnServicio;
    private javax.swing.JTextArea txaDescripcionServicio;
    private javax.swing.JTextField txtCodigoProducto;
    private javax.swing.JTextField txtCodigoServicio;
    private javax.swing.JTextField txtDescripcionProducto;
    private javax.swing.JTextField txtPrecioAlto;
    private javax.swing.JTextField txtPrecioBajo;
    private javax.swing.JTextField txtPrecioServicio;
    // End of variables declaration//GEN-END:variables

    /**
     * Este método valida los campos y crea nuevos productos o servicios según
     * los datos ingresados.
     */
    public void crearProducto() {
        // Verificar si se está mostrando el panel de productos
        if (pnlProducto.isShowing()) {

            // Validar que los campos necesarios estén completos
            if (txtCodigoProducto.getText().isEmpty() || txtDescripcionProducto.getText().isEmpty() || cbFormato.getSelectedItem().equals("Seleccionar")
                    || cbPeso.getSelectedItem().equals("Seleccionar") || txtPrecioAlto.getText().isEmpty() || txtPrecioBajo.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Debe completar todos los campos.",
                        "INFORMACIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/informacion.png", 40, 40));

            } else {

                Producto producto = new Producto();
                Ctrl_Producto controlProducto = new Ctrl_Producto();

                // Comprobar si el producto ya existe por descripción o por código
                String descripcionProducto = txtDescripcionProducto.getText().trim();
                String codigoProducto = txtCodigoProducto.getText().trim();
                String pesoString = ((String) cbPeso.getSelectedItem()).replace(" kg", "");
                double pesoDouble = Double.parseDouble(pesoString);

                // Obtener los textos de los campos txtPrecioAlto y txtPrecioBajo
                String precioAltoTexto = txtPrecioAlto.getText().trim();
                String precioBajoTexto = txtPrecioBajo.getText().trim();

                // Reemplazar las comas con puntos en los textos
                precioAltoTexto = precioAltoTexto.replace(',', '.');
                precioBajoTexto = precioBajoTexto.replace(',', '.');

                // Convertir los textos a valores double
                double precioAlto = Double.parseDouble(precioAltoTexto);
                double precioBajo = Double.parseDouble(precioBajoTexto);

                // Verificar si el producto ya existe por descripción o por código
                if (!controlProducto.existeProducto(descripcionProducto, codigoProducto)) {

                    producto.setCodigo(txtCodigoProducto.getText().trim());
                    producto.setDescripcion(txtDescripcionProducto.getText().trim());
                    producto.setFormato(cbFormato.getSelectedItem().toString());
                    producto.setPesoUnitario(pesoDouble);
                    producto.setPrecioAlto(precioAlto);
                    producto.setPrecioBajo(precioBajo);

                    if (controlProducto.crear(producto)) {
                        this.ifProducto.recargarTabla();
                        JOptionPane.showMessageDialog(null, "Producto creado correctamente.", "INFORMACIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/correcto.png", 40, 40));
                        this.Limpiar();
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al crear el producto.",
                                "ATENCIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/cancelar.png", 40, 40));
                        this.Limpiar();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El producto ya está registrado en la base de datos.",
                            "ATENCIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/cancelar.png", 40, 40));
                    this.Limpiar();
                }

            }

            // Verificar si se está mostrando el panel de servicios.
        } else if (pnlServicio.isShowing()) {

            // Validar que los campos necesarios estén completos
            if (txtCodigoServicio.getText().isEmpty() || txaDescripcionServicio.getText().isEmpty() || txtPrecioServicio.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Debe completar todos los campos.",
                        "INFORMACIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/informacion.png", 40, 40));

            } else {

                Producto servicio = new Producto();
                Ctrl_Producto controlServicio = new Ctrl_Producto();

                // Comprobar si el servicio ya existe por descripción o por código
                String descripcionServicio = txaDescripcionServicio.getText().trim();
                String codigoServicio = txtCodigoServicio.getText().trim();

                // Obtener el texto del campo txtPrecioServicio
                String precioServicioTexto = txtPrecioServicio.getText().trim();

                // Reemplazar las comas con puntos en el texto
                precioServicioTexto = precioServicioTexto.replace(',', '.');

                // Convertir el texto a valor double
                double precioServicio = Double.parseDouble(precioServicioTexto);

                // Verificar si el servicio ya existe por descripción o por código
                if (!controlServicio.existeProducto(descripcionServicio, codigoServicio)) {

                    servicio.setCodigo(txtCodigoServicio.getText().trim());
                    servicio.setDescripcion(txaDescripcionServicio.getText().trim());
                    servicio.setPrecioServicio(precioServicio);

                    if (controlServicio.crear(servicio)) {
                        this.ifProducto.recargarTabla();
                        JOptionPane.showMessageDialog(null, "Servicio creado correctamente.", "INFORMACIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/correcto.png", 40, 40));
                        this.Limpiar();
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al crear el servicio.",
                                "ATENCIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/cancelar.png", 40, 40));
                        this.Limpiar();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El servicio ya está registrado en la base de datos.",
                            "ATENCIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/cancelar.png", 40, 40));
                    this.Limpiar();
                }

            }
        }

    } // Cierre del método.

    /**
     * Este método valida los campos y actualiza productos o servicios según los
     * datos ingresados.
     */
    public void actualizarProducto() {

        // Verificar si se está mostrando el panel de productos
        if (pnlProducto.isShowing()) {

            // Validar que los campos necesarios estén completos
            if (txtCodigoProducto.getText().isEmpty() || txtDescripcionProducto.getText().isEmpty() || cbFormato.getSelectedItem().equals("Seleccionar")
                    || cbPeso.getSelectedItem().equals("Seleccionar") || txtPrecioAlto.getText().isEmpty() || txtPrecioBajo.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Debe completar todos los campos.",
                        "INFORMACIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/informacion.png", 40, 40));

            } else {

                Producto producto = new Producto();
                Ctrl_Producto controlProducto = new Ctrl_Producto();

                String pesoString = ((String) cbPeso.getSelectedItem()).replace(" kg", "").replace(',', '.');
                double pesoDouble = Double.parseDouble(pesoString);

                // Leer y procesar los precios manteniendo un formato consistente
                String precioAltoString = txtPrecioAlto.getText().replace(',', '.');
                String precioBajoString = txtPrecioBajo.getText().replace(',', '.');

                producto.setCodigo(txtCodigoProducto.getText().trim());
                producto.setDescripcion(txtDescripcionProducto.getText().trim());
                producto.setFormato(cbFormato.getSelectedItem().toString());
                producto.setPesoUnitario(pesoDouble);
                // Convertir los precios nuevamente al formato adecuado para el almacenamiento en la base de datos
                producto.setPrecioAlto(Double.valueOf(precioAltoString.replace(',', '.')));
                producto.setPrecioBajo(Double.valueOf(precioBajoString.replace(',', '.')));

                if (controlProducto.actualizar(producto, idProducto)) {

                    this.ifProducto.recargarTabla();
                    JOptionPane.showMessageDialog(null, "Datos del producto actualizados correctamente.", "INFORMACIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/correcto.png", 40, 40));
                    this.dispose();

                } else {
                    JOptionPane.showMessageDialog(null, "Error al actualizar el producto.",
                            "ATENCIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/cancelar.png", 40, 40));
                }

            }

            // Verificar si se está mostrando el panel de servicios.
        } else if (pnlServicio.isShowing()) {

            // Validar que los campos necesarios estén completos
            if (txtCodigoServicio.getText().isEmpty() || txaDescripcionServicio.getText().isEmpty() || txtPrecioServicio.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Debe completar todos los campos.",
                        "INFORMACIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/informacion.png", 40, 40));

            } else {

                Producto servicio = new Producto();
                Ctrl_Producto controlServicio = new Ctrl_Producto();

                // Leer y procesar el precio del servicio manteniendo un formato consistente
                String precioServicioString = txtPrecioServicio.getText().replace(',', '.');

                servicio.setCodigo(txtCodigoServicio.getText().trim());
                servicio.setDescripcion(txaDescripcionServicio.getText().trim());

                // Convertir el precio del servicio al formato adecuado para el almacenamiento en la base de datos
                servicio.setPrecioServicio(Double.valueOf(precioServicioString));

                if (controlServicio.actualizar(servicio, idProducto)) {
                    this.ifProducto.recargarTabla();
                    JOptionPane.showMessageDialog(null, "Servicio actualizado correctamente.", "INFORMACIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/correcto.png", 40, 40));
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "Error al actualizar el servicio.",
                            "ATENCIÓN", JOptionPane.PLAIN_MESSAGE, icono("/img/cancelar.png", 40, 40));
                }

            }
        }
    } // Cierre del método.

    /**
     * Este método muestra los datos del producto seleccionado para su edición o
     * actualización.
     *
     * @param idProducto El ID del producto seleccionado a mostrar.
     * @param datosFila Los datos del producto seleccionado.
     */
    public void mostrarDatos(int idProducto, Object[] datosFila) {
        // Obtener el precio del servicio como un Double desde los datos de la fila
        Double precioServicio = (Double) datosFila[6];

        // Convertir el precio del servicio a una cadena con el formato adecuado (dos decimales)
        String precioServicioStr = String.format("%.2f", precioServicio);

        if ("0.00".equals(precioServicioStr.replace(",", "."))) {
            pnlProducto.setVisible(true);
            pnlServicio.setVisible(false);
            rbtnProducto.setSelected(true);
            rbtnServicio.setEnabled(false); //Inhabilitamos la opción de servicio para que no se pueda seleccionar.
            lblTitulo.setText("Editar producto");
            btnCrear.setText("Actualizar");
            txtCodigoProducto.setText((String) datosFila[0]);
            txtDescripcionProducto.setText((String) datosFila[1]);

            // Crear un modelo de ComboBox con los valores "Seleccionar", "Sacos/Bags", "Cubos/Tubs", "Botes/Bottles"
            DefaultComboBoxModel<String> modeloFormato = new DefaultComboBoxModel<>();
            modeloFormato.addElement("Seleccionar");
            modeloFormato.addElement("Sacos/Bags");
            modeloFormato.addElement("Cubos/Tubs");
            modeloFormato.addElement("Botes/Bottles");

            // Establecer el modelo en el JComboBox
            cbFormato.setModel(modeloFormato);

            // Seleccionar el valor correspondiente al producto seleccionado
            String formato = (String) datosFila[2];
            cbFormato.setSelectedItem(formato);

            // Crear un modelo de ComboBox con los valores "Seleccionar", "Sacos/Bags", "Cubos/Tubs", "Botes/Bottles"
            DefaultComboBoxModel<String> modeloPeso = new DefaultComboBoxModel<>();
            modeloPeso.addElement("Seleccionar");
            modeloPeso.addElement("25,00 kg");
            modeloPeso.addElement("20,00 kg");
            modeloPeso.addElement("10,00 kg");
            modeloPeso.addElement("5,00 kg");
            modeloPeso.addElement("0,75 kg");

            // Establecer el modelo en el JComboBox
            cbPeso.setModel(modeloPeso);

            // Seleccionar el valor correspondiente al producto seleccionado
            Double pesoProducto = (Double) datosFila[3];

            // Convertir el peso del producto a un String con el formato adecuado
            String pesoProductoStr = String.format("%.2f kg", pesoProducto); // O "%.0f kg" si se desea mostrar como entero

            // Seleccionar el valor correspondiente al peso del producto seleccionado
            cbPeso.setSelectedItem(pesoProductoStr);

            txtPrecioAlto.setText(String.valueOf((Double) datosFila[4]));
            txtPrecioBajo.setText(String.valueOf((Double) datosFila[5]));

        } else {
            pnlServicio.setVisible(true);
            pnlProducto.setVisible(false);
            rbtnProducto.setEnabled(false); //Inhabilitamos la opción de producto para que no se pueda seleccionar.
            rbtnServicio.setSelected(true);
            lblTitulo.setText("Editar servicio");
            btnCrear.setText("Actualizar");
            txtCodigoServicio.setText((String) datosFila[0]);
            txaDescripcionServicio.setText((String) datosFila[1]);
            txtPrecioServicio.setText(String.valueOf((Double) datosFila[6]));
        }

    } // Cierre del método.

    /**
     * Este método devuelve el Internal Frame Productos.
     *
     * @return Internal Frame Productos.
     */
    public InterProductos getIfProducto() {
        return ifProducto;
    } // Cierre del método.

    /**
     * Este método establece el Internal Frame Productos.
     *
     * @param ifProducto Internal Frame Productos.
     */
    public void setIfProducto(InterProductos ifProducto) {
        this.ifProducto = ifProducto;
    } // Cierre del método.

    /**
     * Este método establece el ID del producto.
     *
     * @param idProducto El ID del producto a establecer.
     */
    public void setIdProducto(int idProducto) {
        this.idProducto = idProducto;
    } // Cierre del método.

    /**
     * Este método limpia los campos del formulario.
     */
    private void Limpiar() {
        txtCodigoProducto.setText("");
        txtDescripcionProducto.setText("");
        cbFormato.setSelectedItem("Seleccionar");
        cbPeso.setSelectedItem("Seleccionar");
        txtPrecioAlto.setText("");
        txtPrecioBajo.setText("");
        txtCodigoServicio.setText("");
        txaDescripcionServicio.setText("");
        txtPrecioServicio.setText("");
    } // Cierre del método.

    /**
     * Retorna un icono escalado de acuerdo a la ruta y las dimensiones
     * especificadas.
     *
     * @param path La ruta del icono.
     * @param width La anchura del icono.
     * @param heigth La altura del icono.
     * @return El icono escalado.
     */
    public Icon icono(String path, int width, int heigth) {
        Icon img = new ImageIcon(new ImageIcon(getClass().getResource(path)).getImage().getScaledInstance(width, heigth, java.awt.Image.SCALE_SMOOTH));
        return img;
    } // Cierre del método.

} // Cierre de la clase.
